//
// Generated file, do not edit! Created by opp_msgc 4.1 from PowerSystem/PEVMessages.msg.
//

#ifndef _PEVMESSAGES_M_H_
#define _PEVMESSAGES_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet PowerSysACKMessage
 * {
 *     string type;
 * }
 * </pre>
 */
class PowerSysACKMessage : public ::cPacket
{
  protected:
    opp_string type_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PowerSysACKMessage&);

  public:
    PowerSysACKMessage(const char *name=NULL, int kind=0);
    PowerSysACKMessage(const PowerSysACKMessage& other);
    virtual ~PowerSysACKMessage();
    PowerSysACKMessage& operator=(const PowerSysACKMessage& other);
    virtual PowerSysACKMessage *dup() const {return new PowerSysACKMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getType() const;
    virtual void setType(const char * type_var);
};

inline void doPacking(cCommBuffer *b, PowerSysACKMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PowerSysACKMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet NodeNotificationMessage
 * {
 *     string nodeId;
 *     
 *     double voltage;
 *     double load;
 * }
 * </pre>
 */
class NodeNotificationMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    double voltage_var;
    double load_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NodeNotificationMessage&);

  public:
    NodeNotificationMessage(const char *name=NULL, int kind=0);
    NodeNotificationMessage(const NodeNotificationMessage& other);
    virtual ~NodeNotificationMessage();
    NodeNotificationMessage& operator=(const NodeNotificationMessage& other);
    virtual NodeNotificationMessage *dup() const {return new NodeNotificationMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual double getVoltage() const;
    virtual void setVoltage(double voltage_var);
    virtual double getLoad() const;
    virtual void setLoad(double load_var);
};

inline void doPacking(cCommBuffer *b, NodeNotificationMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NodeNotificationMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet PEVAuthenticationMessage
 * {
 * 	string nodeId;
 * 	string vehicleID;
 * 	string customerID;
 * 	string pinNumber;
 * }
 * </pre>
 */
class PEVAuthenticationMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    opp_string vehicleID_var;
    opp_string customerID_var;
    opp_string pinNumber_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PEVAuthenticationMessage&);

  public:
    PEVAuthenticationMessage(const char *name=NULL, int kind=0);
    PEVAuthenticationMessage(const PEVAuthenticationMessage& other);
    virtual ~PEVAuthenticationMessage();
    PEVAuthenticationMessage& operator=(const PEVAuthenticationMessage& other);
    virtual PEVAuthenticationMessage *dup() const {return new PEVAuthenticationMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID_var);
    virtual const char * getCustomerID() const;
    virtual void setCustomerID(const char * customerID_var);
    virtual const char * getPinNumber() const;
    virtual void setPinNumber(const char * pinNumber_var);
};

inline void doPacking(cCommBuffer *b, PEVAuthenticationMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PEVAuthenticationMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet PEVAuthenticationResponseMessage
 * {
 * 	string nodeId;
 * 	string vehicleID;
 * 	string customerID;
 * }
 * </pre>
 */
class PEVAuthenticationResponseMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    opp_string vehicleID_var;
    opp_string customerID_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PEVAuthenticationResponseMessage&);

  public:
    PEVAuthenticationResponseMessage(const char *name=NULL, int kind=0);
    PEVAuthenticationResponseMessage(const PEVAuthenticationResponseMessage& other);
    virtual ~PEVAuthenticationResponseMessage();
    PEVAuthenticationResponseMessage& operator=(const PEVAuthenticationResponseMessage& other);
    virtual PEVAuthenticationResponseMessage *dup() const {return new PEVAuthenticationResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID_var);
    virtual const char * getCustomerID() const;
    virtual void setCustomerID(const char * customerID_var);
};

inline void doPacking(cCommBuffer *b, PEVAuthenticationResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PEVAuthenticationResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet PEVControlMessage
 * {
 * 	string nodeId;
 * 	string vehicleID;
 * 	string customerID;
 * 	string operation;
 * }
 * </pre>
 */
class PEVControlMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    opp_string vehicleID_var;
    opp_string customerID_var;
    opp_string operation_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PEVControlMessage&);

  public:
    PEVControlMessage(const char *name=NULL, int kind=0);
    PEVControlMessage(const PEVControlMessage& other);
    virtual ~PEVControlMessage();
    PEVControlMessage& operator=(const PEVControlMessage& other);
    virtual PEVControlMessage *dup() const {return new PEVControlMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID_var);
    virtual const char * getCustomerID() const;
    virtual void setCustomerID(const char * customerID_var);
    virtual const char * getOperation() const;
    virtual void setOperation(const char * operation_var);
};

inline void doPacking(cCommBuffer *b, PEVControlMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PEVControlMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet SubstationNotificationMessage
 * {
 *     string nodeId;
 * 	double totalPowerLoad;
 * 	double totalPowerLosses;
 * }
 * </pre>
 */
class SubstationNotificationMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    double totalPowerLoad_var;
    double totalPowerLosses_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SubstationNotificationMessage&);

  public:
    SubstationNotificationMessage(const char *name=NULL, int kind=0);
    SubstationNotificationMessage(const SubstationNotificationMessage& other);
    virtual ~SubstationNotificationMessage();
    SubstationNotificationMessage& operator=(const SubstationNotificationMessage& other);
    virtual SubstationNotificationMessage *dup() const {return new SubstationNotificationMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual double getTotalPowerLoad() const;
    virtual void setTotalPowerLoad(double totalPowerLoad_var);
    virtual double getTotalPowerLosses() const;
    virtual void setTotalPowerLosses(double totalPowerLosses_var);
};

inline void doPacking(cCommBuffer *b, SubstationNotificationMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SubstationNotificationMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet ChargingDeadlineRequestMessage
 * {
 * 	string nodeId;
 * 	string vehicleID;
 * 	string customerID;
 * 	
 * 	double deadline;
 * 	double batteryCapacity;
 * 	double batteryKwPerHour;
 * 	double batteryDepthOfDischarge;
 * 	double batteryStateOfCharge;
 * 	double baseLoad;
 * 	bool wantV2G;
 * }
 * </pre>
 */
class ChargingDeadlineRequestMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    opp_string vehicleID_var;
    opp_string customerID_var;
    double deadline_var;
    double batteryCapacity_var;
    double batteryKwPerHour_var;
    double batteryDepthOfDischarge_var;
    double batteryStateOfCharge_var;
    double baseLoad_var;
    bool wantV2G_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ChargingDeadlineRequestMessage&);

  public:
    ChargingDeadlineRequestMessage(const char *name=NULL, int kind=0);
    ChargingDeadlineRequestMessage(const ChargingDeadlineRequestMessage& other);
    virtual ~ChargingDeadlineRequestMessage();
    ChargingDeadlineRequestMessage& operator=(const ChargingDeadlineRequestMessage& other);
    virtual ChargingDeadlineRequestMessage *dup() const {return new ChargingDeadlineRequestMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID_var);
    virtual const char * getCustomerID() const;
    virtual void setCustomerID(const char * customerID_var);
    virtual double getDeadline() const;
    virtual void setDeadline(double deadline_var);
    virtual double getBatteryCapacity() const;
    virtual void setBatteryCapacity(double batteryCapacity_var);
    virtual double getBatteryKwPerHour() const;
    virtual void setBatteryKwPerHour(double batteryKwPerHour_var);
    virtual double getBatteryDepthOfDischarge() const;
    virtual void setBatteryDepthOfDischarge(double batteryDepthOfDischarge_var);
    virtual double getBatteryStateOfCharge() const;
    virtual void setBatteryStateOfCharge(double batteryStateOfCharge_var);
    virtual double getBaseLoad() const;
    virtual void setBaseLoad(double baseLoad_var);
    virtual bool getWantV2G() const;
    virtual void setWantV2G(bool wantV2G_var);
};

inline void doPacking(cCommBuffer *b, ChargingDeadlineRequestMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ChargingDeadlineRequestMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet StateOfChargeMessage
 * {
 * 	string nodeId;
 * 	string vehicleID;
 * 	string customerID;
 * 	
 * 	double batteryCapacity;
 * 	double batteryKwPerHour;
 * 	double batteryDepthOfDischarge;
 * 	double batteryStateOfCharge;
 * }
 * </pre>
 */
class StateOfChargeMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    opp_string vehicleID_var;
    opp_string customerID_var;
    double batteryCapacity_var;
    double batteryKwPerHour_var;
    double batteryDepthOfDischarge_var;
    double batteryStateOfCharge_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StateOfChargeMessage&);

  public:
    StateOfChargeMessage(const char *name=NULL, int kind=0);
    StateOfChargeMessage(const StateOfChargeMessage& other);
    virtual ~StateOfChargeMessage();
    StateOfChargeMessage& operator=(const StateOfChargeMessage& other);
    virtual StateOfChargeMessage *dup() const {return new StateOfChargeMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID_var);
    virtual const char * getCustomerID() const;
    virtual void setCustomerID(const char * customerID_var);
    virtual double getBatteryCapacity() const;
    virtual void setBatteryCapacity(double batteryCapacity_var);
    virtual double getBatteryKwPerHour() const;
    virtual void setBatteryKwPerHour(double batteryKwPerHour_var);
    virtual double getBatteryDepthOfDischarge() const;
    virtual void setBatteryDepthOfDischarge(double batteryDepthOfDischarge_var);
    virtual double getBatteryStateOfCharge() const;
    virtual void setBatteryStateOfCharge(double batteryStateOfCharge_var);
};

inline void doPacking(cCommBuffer *b, StateOfChargeMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StateOfChargeMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet ChargingDeadlineResponseRow
 * {
 *     int status;
 * 	double startTime;
 * 	double endTime;
 * 	string type;
 * }
 * </pre>
 */
class ChargingDeadlineResponseRow : public ::cPacket
{
  protected:
    int status_var;
    double startTime_var;
    double endTime_var;
    opp_string type_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ChargingDeadlineResponseRow&);

  public:
    ChargingDeadlineResponseRow(const char *name=NULL, int kind=0);
    ChargingDeadlineResponseRow(const ChargingDeadlineResponseRow& other);
    virtual ~ChargingDeadlineResponseRow();
    ChargingDeadlineResponseRow& operator=(const ChargingDeadlineResponseRow& other);
    virtual ChargingDeadlineResponseRow *dup() const {return new ChargingDeadlineResponseRow(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getStatus() const;
    virtual void setStatus(int status_var);
    virtual double getStartTime() const;
    virtual void setStartTime(double startTime_var);
    virtual double getEndTime() const;
    virtual void setEndTime(double endTime_var);
    virtual const char * getType() const;
    virtual void setType(const char * type_var);
};

inline void doPacking(cCommBuffer *b, ChargingDeadlineResponseRow& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ChargingDeadlineResponseRow& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PowerSystem/PEVMessages.msg</tt> by opp_msgc.
 * <pre>
 * packet ChargingDeadlineResponseMessage
 * {
 * 	string nodeId;
 * 	string vehicleID;
 * 	string customerID;
 * 
 * 	ChargingDeadlineResponseRow results[];
 * }
 * </pre>
 */
class ChargingDeadlineResponseMessage : public ::cPacket
{
  protected:
    opp_string nodeId_var;
    opp_string vehicleID_var;
    opp_string customerID_var;
    ::ChargingDeadlineResponseRow *results_var; // array ptr
    unsigned int results_arraysize;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ChargingDeadlineResponseMessage&);

  public:
    ChargingDeadlineResponseMessage(const char *name=NULL, int kind=0);
    ChargingDeadlineResponseMessage(const ChargingDeadlineResponseMessage& other);
    virtual ~ChargingDeadlineResponseMessage();
    ChargingDeadlineResponseMessage& operator=(const ChargingDeadlineResponseMessage& other);
    virtual ChargingDeadlineResponseMessage *dup() const {return new ChargingDeadlineResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getNodeId() const;
    virtual void setNodeId(const char * nodeId_var);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID_var);
    virtual const char * getCustomerID() const;
    virtual void setCustomerID(const char * customerID_var);
    virtual void setResultsArraySize(unsigned int size);
    virtual unsigned int getResultsArraySize() const;
    virtual ChargingDeadlineResponseRow& getResults(unsigned int k);
    virtual const ChargingDeadlineResponseRow& getResults(unsigned int k) const {return const_cast<ChargingDeadlineResponseMessage*>(this)->getResults(k);}
    virtual void setResults(unsigned int k, const ChargingDeadlineResponseRow& results_var);
};

inline void doPacking(cCommBuffer *b, ChargingDeadlineResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ChargingDeadlineResponseMessage& obj) {obj.parsimUnpack(b);}


#endif // _PEVMESSAGES_M_H_
